#!/usr/bin/env ./node_modules/.bin/babel-node
import * as http from 'http';
import connect from 'connect';
import findFreePort from 'find-free-port';
import opener from 'opener';
import request from 'request';
import webpack from 'webpack';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';

import { current as config } from '../config';
import * as webpackConfig from '../config/webpack';

// Make sure that we honor the configured Babel environment.
process.env.BABEL_ENV = config.babelEnvironment;

const compiler = webpack(webpackConfig);

// webpack-dev-middleware throws globally when not in lazy mode.
function trapWebpackCompilationErrors() {
  process.on('uncaughtException', error => {
    if (error.name !== 'ModuleBuildError') throw error;
    let message = error.message;
    // Attempt to clean it up
    message = message.replace('Module build failed: SyntaxError: ', '');
    message = message.replace(process.cwd(), '');
    message = message.replace(/\n\s*at.*/g, '');
    // And out we go.
    process.stderr.write(`${message}\n`);
  });
}

function startServer(port) {
  const app = connect();
  const url = `http://localhost:${port}`;

  app.use(webpackDevMiddleware(compiler, {
    noInfo: true,
    stats: {
      colors: true,
    },
  }));

  app.use(webpackHotMiddleware(compiler));

  app.use((_req, res) => {
    request(url).pipe(res);
  });

  http.createServer(app).listen(port, error => {
    if (error) throw error;

    // Ensure that the bundle builds before we attempt to open the page.
    request(url, () => {
      // If we've gotten this far; we're guaranteed to have a valid bundle.
      trapWebpackCompilationErrors();

      process.stdout.write(`Dev server listening at ${url}\n`);
      opener(url);
    });
  });
}

const envPort = parseInt(process.env.PORT);
if (envPort > 0) {
  startServer(envPort);
} else {
  findFreePort(3000, (error, port) => {
    if (error) throw error;
    startServer(port);
  });
}
